#A1.Consider the given list as [2, 7, 4, 1, 3, 6]. Write a program to count pairs of elements with sum equal to 10.
# Function to find the length of a list
def find_length(list1):
    length = 0
    # Iterate through each element in the list
    for i in list1:
        length += 1  # Increment length for each element
    return length  # Return the total length

# Function to count pairs of elements that sum up to 10
def sum_pair10(list2):
    length = find_length(list2)  # Get the length of the list
    count = 0  # Initialize the count of pairs
    # Iterate through each element with index i
    for i in range(length):
        # Iterate through each subsequent element with index j
        for j in range(i+1, length):
            # Check if the sum of the pair equals 10
            if (list2[i]) + (list2[j]) == 10:
                count += 1  # Increment the count if condition is met
    return count  # Return the total count of pairs

# Main part of the program
n = int(input("Enter the number of elements in the list: "))  # Read the number of elements
my_list = []  # Initialize an empty list
# Read the elements from user input
for i in range(n):
    element = int(input(f"Enter element at index {i}: "))
    my_list.append(element)  # Add element to the list

print("Made list is:", my_list)  # Print the created list
print("Number of pairs in list:", sum_pair10(my_list))  # Print the number of pairs that sum up to 10


#A2.Write a program that takes a list of real numbers as input and returns the range (difference 
between minimum and maximum) of the list. Check for list being less than 3 elements in 
which case return an error message (Ex: “Range determination not possible”). Given a list 
[5,3,8,1,0,4], the range is 8 (8-0). 

# Function to find the length of a list
def find_length(list1):
    length = 0
    # Iterate through each element in the list
    for i in list1:
        length += 1  # Increment length for each element
    return length  # Return the total length

# Function to check if the length of the list is less than or equal to 3
def length_check(length):
    if length <= 3:
        return 1  # Return 1 if length is 3 or less
    else:
        return 0  # Return 0 if length is greater than 3

# Function to find the range of values in a list
def find_range(list2):
    if not list2:
        return None  # Handle empty list case by returning None
    
    largest = list2[0]  # Initialize largest with the first element
    smallest = list2[0]  # Initialize smallest with the first element
    length = find_length(list2)  # Get the length of the list
    
    # Iterate through the list starting from the second element
    for i in range(1, length):
        if list2[i] > largest:
            largest = list2[i]  # Update largest if current element is greater
        if list2[i] < smallest:
            smallest = list2[i]  # Update smallest if current element is smaller
    
    x = largest - smallest  # Calculate the range
    return x  # Return the calculated range

# Main part of the program
n = int(input("Enter the number of elements in the list: "))  # Read the number of elements
my_list = [None] * n  # Initialize a list with None values

# Read the elements from user input
for i in range(n):
    element = float(input(f"Enter element at index {i}: "))
    my_list[i] = element  # Add element to the list

# Check if the length of the list is less than or equal to 3
if length_check(find_length(my_list)):
    print("Range determination not possible")  # Print message if range cannot be determined
else:
    print("The range is:", find_range(my_list))  # Print the range of values in the list


#A3. Write a program that accepts a square matrix A and a positive integer m as arguments and 
returns A^m.
# Function to perform matrix multiplication
def matrix_multiply(matrix1, matrix2):
    size = len(matrix1)  # Get the size of the matrix (assumes square matrix)
    product = []  # Initialize an empty list to store the result of multiplication
    
    # Initialize the product matrix with zeros
    for i in range(size):
        row = [0] * size  # Create a row with zeroes
        product.append(row)  # Append the row to the product matrix
    
    # Perform matrix multiplication
    for i in range(size):
        for j in range(size):
            for k in range(size):
                product[i][j] += matrix1[i][k] * matrix2[k][j]  # Compute the dot product of rows and columns
    
    return product  # Return the resulting product matrix

# Function to compute the power of a matrix using exponentiation by squaring
def matrix_power(matrix, exponent):
    size = len(matrix)  # Get the size of the matrix
    # Initialize the result as an identity matrix
    result = [[1 if i == j else 0 for j in range(size)] for i in range(size)]
    temp_matrix = matrix  # Set the temporary matrix to the input matrix
    
    # Exponentiation by squaring
    while exponent > 0:
        if exponent % 2 == 1:
            result = matrix_multiply(result, temp_matrix)  # Multiply result by temp_matrix if exponent is odd
        temp_matrix = matrix_multiply(temp_matrix, temp_matrix)  # Square the temp_matrix
        exponent //= 2  # Divide exponent by 2 (integer division)
    
    return result  # Return the final matrix raised to the given power

# Main part of the program
n = int(input("Enter the size of the square matrix: "))  # Read the size of the matrix
matrix = []  # Initialize an empty list to store the matrix

# Read matrix elements from user input
for i in range(n):
    row = []  # Initialize an empty row
    for j in range(n):
        element = float(input(f"Enter element at position ({i}, {j}): "))  # Read an element from user input
        row.append(element)  # Add the element to the row
    matrix.append(row)  # Add the row to the matrix

exponent = int(input("Enter the power to which the matrix should be raised: "))  # Read the exponent
result = matrix_power(matrix, exponent)  # Compute the matrix raised to the given power

# Output the result matrix
for row in result:
    print(row)  # Print each row of the result matrix

#A4. Write a program to count the highest occurring character & its occurrence count in an input 
string. Consider only alphabets. Ex:  for “hippopotamus” as input string, the maximally 
occurring character is ‘p’ & occurrence count is 3. 

# Function to count the frequency of characters in a string
def count_characters(s):
    char_count = {}  # Initialize an empty dictionary to store character counts
    
    # Iterate through each character in the string
    for char in s:
        if char not in char_count:
            char_count[char] = 1  # Add the character to the dictionary with a count of 1
        else:
            char_count[char] += 1  # Increment the count of the character if it already exists in the dictionary
    
    max_char = None  # Variable to store the character with the highest frequency
    count = 0  # Variable to store the highest frequency count
    
    # Iterate through the dictionary to find the character with the highest frequency
    for char in char_count:
        if char_count[char] > count:
            max_char = char  # Update max_char to the current character
            count = char_count[char]  # Update count to the current character's frequency
    
    return max_char, count  # Return the character with the highest frequency and its count

# Main part of the program
input_string = input("Enter a string: ")  # Read the input string from the user
highest_char, highest_count = count_characters(input_string)  # Call the function and get the result
print("The highest occurring character is:", highest_char)  # Print the character with the highest frequency
print("The occurrence count is:", highest_count)  # Print the frequency count of the highest occurring character


